program sncEVGSetup

%%//----------------------------------------
%%// 	      Variables
%%//----------------------------------------

int currTime;
int prevTime;
int utcSrcCopy;

%%//----------------------------------------
%%// 	      Monitored PVs
%%//----------------------------------------

int cmd_conf_get;
assign cmd_conf_get to "{P}{R}cmd_conf_get";
monitor cmd_conf_get;
evflag cmd_conf_get_event;
sync cmd_conf_get cmd_conf_get_event;

int funselRBV;
assign funselRBV to "{P}{R}DevFun-Sts.RVAL";
monitor funselRBV;

int network;
assign network to "{P}{R}Network-Mon";
monitor network;

unsigned int utc;
assign utc to "{P}{R}UTC-SP";

unsigned int utcRBV;
assign utcRBV to "{P}{R}UTC-RB";
monitor utcRBV;
evflag utcRBVFlag;
sync utcRBV utcRBVFlag;

int utcsrc;
assign utcsrc to "{P}{R}UTCRefSrc-Sel";
monitor utcsrc;

unsigned int utcCtrlRoom;
assign utcCtrlRoom to "{P}{R}CtrlRoomUTC";
monitor utcCtrlRoom;
evflag utcCtrlRoomFlag;
sync utcCtrlRoom utcCtrlRoomFlag;

int utcMismatch;
assign utcMismatch to "{P}{R}UTCMismatch-Mon";

int getutc;
assign getutc to "{P}{R}GetUTC-Cmd";
monitor getutc;

%%//----------------------------------------
%%// 	  Escaped C Code Declaration
%%//----------------------------------------

%%#include <time.h>

%%//----------------------------------------
%%// 	    State Notation Language
%%//----------------------------------------

ss configuration {

  state waiting {

		entry{

			%%// Clear control room flag
			efClear(utcRBVFlag);
		}

		when (efTestAndClear(utcRBVFlag)) {

			%{/* On Timing UTCRBV change, compare it to the reference */}%

			utcSrcCopy = utcsrc; %%// Copy UTC source to protect it against change

			if(utcSrcCopy == 0){ %%// UTC source comes from PC

				if(utcRBV == time(NULL)){

					%%// clear UTC mismatch PV
					utcMismatch = 0;
				}
				else{
					%%// set UTC mismatch PV
					utcMismatch = 1;
				}
			}
			else { %%// UTC source comes from Control Room PV

				if(utcRBV == utcCtrlRoom){

					%%// clear UTC mismatch PV
					utcMismatch = 0;
				}
				else{
					%%// set UTC mismatch PV
					utcMismatch = 1;
				}
			}

			%%// put result	in PV
			pvPut(utcMismatch, SYNC);

		} state waiting

		when (getutc) {

			%{/* UTC update requested, update it! */}%

			%%// Clear update UTC PV
			getutc = 0;
			pvPut(getutc, SYNC);

		} state updateUTC
  }
	
  state updateUTC {

		entry{

			%%// Copy UTC source to protect it against change
			utcSrcCopy = utcsrc;

			if(utcSrcCopy == 0){

				%%// Get computer time
				currTime = time(NULL);
				prevTime = currTime;
			}
			else{

				%%// Clear Control Room UTC flag
				efClear(utcCtrlRoomFlag);
			}
		}

		when(utcSrcCopy == 0 && delay(0.01)){

			%{/* Read UTC value from computer */}%

			currTime = time(NULL);

		} state updateUTC

		when(utcSrcCopy == 0 && prevTime != currTime){

			%{/* Update UTC as soon as PC time changes value */}%

			utc = currTime;
			pvPut(utc, SYNC);

		} state waiting

		when (utcSrcCopy == 1 && efTestAndClear(utcCtrlRoomFlag)) {

			%{/* Update UTC as soon as reference changes value */}%

			utc = utcCtrlRoom;
			pvPut(utc, SYNC);

		}state waiting
  }
}

ss networkStatus {

	state networkCheck {

		when (efTestAndClear(cmd_conf_get_event)) {
			network = !(pvStatus(cmd_conf_get) || funselRBV == 0);
			pvPut(network,SYNC);
		} state networkCheck
	}
}
