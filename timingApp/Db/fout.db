record(stringout, "$(P)$(R)IPAddr-Mon"){
  field(DESC, "IPADDR")
  field(VAL, "$(IPADDR)")
}

record(stringout, "$(P)$(R)IPPort-Mon"){
  field(DESC, "IPPORT")
  field(VAL, "$(IPPORT)")
}

########################################################################
# Control and Status Register [0]

record(mbboDirect, "$(P)$(R)RxEnbl-SP") {
  field(DESC, "Each bit sets Rx OUT status")
  field(DTYP, "stream")
  field(OUT, "@timing.proto fout_ctrl_set($(P),$(R)) $(PORT)")
}

record(mbbiDirect, "$(P)$(R)RxEnbl-RB") {
  field(ASG, "Reserved")
  field(DESC, "Each bit shows Rx OUT status")
  field(NOBT, "8")
  field(SCAN, "I/O Intr")
  field(DTYP, "stream")
  field(INP, "@timing.proto fout_ctrl_rxen_intr $(PORT)")
}

record(mbbiDirect, "$(P)$(R)EnblRaw"){
  field(DESC, "Enable/Disable FANOUT RAW")
  field(NOBT, "1")
  field(DTYP, "stream")
  field(SCAN, "I/O Intr")
  field(INP, "@timing.proto fout_ctrl_en_intr $(PORT)")
  field(FLNK, "$(P)$(R)DevEnbl-Sts")
}

record(bi, "$(P)$(R)DevEnbl-Sts"){
  field(DESC, "Enable/Disable FANOUT RBV")
  field(ZNAM, "Dsbl")
  field(ONAM, "Enbl")
  field(INP, "$(P)$(R)EnblRaw.B0")
}

record(mbbiDirect, "$(P)$(R)LinkRaw") {
  field(ASG, "Reserved")
  field(DESC, "Uplink status RAW")
  field(NOBT, "8")
  field(DTYP, "stream")
  field(SCAN, "I/O Intr")
  field(INP, "@timing.proto fout_ctrl_link_intr $(PORT)")
  field(FLNK, "$(P)$(R)LinkStatus-Mon")
}

record(bi, "$(P)$(R)LinkStatus-Mon") {
  field(ASG, "Reserved")
  field(DESC, "Uplink status")
  field(ZNAM, "Unlink")
  field(ONAM, "Link")
  field(INP, "$(P)$(R)LinkRaw.B7")
}

record(mbbiDirect, "$(P)$(R)Los-Mon") {
  field(DESC, "Downlink status in OUT0-OUT7")
  field(NOBT, "8")
  field(DTYP, "stream")
  field(SCAN, "I/O Intr")
  field(INP, "@timing.proto fout_ctrl_los_intr $(PORT)")
}

record(bo, "$(P)$(R)DevEnbl-Sel"){
  field(DESC, "Enable/Disable FANOUT")
  field(MASK, "1")
  field(DTYP, "stream")
  field(ZNAM, "Dsbl")
  field(ONAM, "Enbl")
  field(OUT, "@timing.proto fout_ctrl_set($(P),$(R)) $(PORT)")
}

record(longout, "$(P)$(R)cmd_ctrl_get") {
  field(ASG, "Reserved")
  field(DESC, "Control Status reg read command code")
  field(VAL, "0x80") # (0x80 | reg number)
  field(SCAN, "1 second")
  field(DTYP, "stream")
  field(OUT, "@timing.proto fout_ctrl_get($(P),$(R)) $(PORT)")
}

record(longout, "$(P)$(R)cmd_ctrl_set") {
  field(ASG, "Reserved")
  field(DESC, "Control Status reg write command code")
  field(VAL, "0x40")
}

########################################################################
# Firmware Version [62]

record(longin, "$(P)$(R)FrmVersionA-Cte"){
  #field(ASG, "Reserved")
  field(DESC, "EVO firmware version")
  field(DTYP, "stream")
  field(INP, "@timing.proto frmvrs_get($(P),$(R)) $(PORT)")
}

record(longin, "$(P)$(R)FrmVersionB-Cte"){
  #field(ASG, "Reserved")
  field(DESC, "EVO firmware version")
  field(DTYP, "stream")
  field(INP, "@timing.proto frmvrs_get($(P),$(R)) $(PORT)")
}

record(longin, "$(P)$(R)FrmVersionC-Cte"){
  #field(ASG, "Reserved")
  field(DESC, "EVO firmware version")
  field(DTYP, "stream")
  field(INP, "@timing.proto frmvrs_get($(P),$(R)) $(PORT)")
}

record(calcout, "$(P)$(R)cmd_frmvrs_get"){
  field(ASG, "Reserved")
  field(DESC, "Firmware version read command code")
  field(VAL, "0xBE")
}

########################################################################
# Configuration Register [63]

record(longin, "$(P)$(R)Alive-Mon") {
  field(ASG, "Reserved")
  field(DESC, "FOUT alive")
  field(SCAN, "I/O Intr")
  field(DTYP, "stream")
  field(INP, "@timing.proto fout_conf_alive_intr $(PORT)")
  field(FLNK, "$(P)$(R)DevStatusCalc")
}

record(mbbi, "$(P)$(R)DevFun-Sts") {
#  field(ASG, "Reserved")
  field(DESC, "STD-EVO function select status")
  field(NOBT, "6")
  field(ZRVL, "16")
  field(ZRST, "FOUT")
  field(ONVL, "17")
  field(ONST, "EVR")
  field(TWVL, "18")
  field(TWST, "EVG")
  field(THVL, "32")
  field(THST, "EVE")
  field(SCAN, "I/O Intr")
  field(DTYP, "stream")
  field(INP, "@timing.proto fout_conf_funsel_intr $(PORT)")
}

record(mbbo, "$(P)$(R)DevFun-Sel") {
  field(DESC, "STD-EVO configuration")
  field(ZRVL, "16")
  field(ZRST, "FOUT")
  field(ONVL, "17")
  field(ONST, "EVR")
  field(TWVL, "18")
  field(TWST, "EVG")
  field(THVL, "32")
  field(THST, "EVE")
  field(VAL, "0")
  field(DTYP, "stream")
  field(OUT, "@timing.proto fout_conf_set($(P),$(R)) $(PORT)")
}

record(longout, "$(P)$(R)cmd_conf_get") {
  field(ASG, "Reserved")
  field(DESC, "Configuration reg read command code")
  field(VAL, "0xBF")
  field(SCAN, "1 second")
  field(DTYP, "stream")
  field(OUT, "@timing.proto fout_conf_get($(P),$(R)) $(PORT)")
}

record(longout, "$(P)$(R)cmd_conf_set") {
  field(ASG, "Reserved")
  field(DESC, "Configuration reg write command code")
  field(VAL, "0x7F")
}

########################################################################
# Write all configuration registers

record(bo, "$(P)$(R)Download-Cmd") {
  field(DESC, "FOUT download")
  field(MASK, "1")
  field(ZNAM, "Dsbl")
  field(ONAM, "Enbl")
}

record(bo, "$(P)$(R)Download-Trig") {
  field(DESC, "FOUT download trigger")
  field(MASK, "1")
  field(ZNAM, "Dsbl")
  field(ONAM, "Enbl")
  field(DTYP, "stream")
  field(OUT, "@timing.proto fout_download($(P),$(R)) $(PORT)")
}

record(calc, "$(P)$(R)DevStatusCalc") {
  field(ASG, "Reserved")
  field(DESC, "FOUT device status calc")
  field(INPA, "$(P)$(R)Alive-Mon")
  field(CALC, "A=0?0:1")
  field(FLNK, "$(P)$(R)DevStatus-Mon")
}

record(bi, "$(P)$(R)DevStatus-Mon") {
  field(ASG, "Reserved")
  field(DESC, "FOUT device status")
  field(ZNAM, "Waiting")
  field(ONAM, "Running")
  field(INP, "$(P)$(R)DevStatusCalc")
}

record(bi, "$(P)$(R)Network-Mon") {
  field(ASG, "Reserved")
  field(DESC, "FOUT network status")
  field(ZNAM, "Disconnected")
  field(ONAM, "Connected")
  field(FLNK, "$(P)$(R)FrmVersionA-Cte")
}

record(bo, "$(P)$(R)Save-Cmd"){
  field(DESC, "FOUT manual save settings command")
  field(MASK, "1")
  field(ZNAM, "Dsbl")
  field(ONAM, "Enbl")
  field(FLNK, "$(P)$(R)Save-Trig")
}

record(calc, "$(P)$(R)Save-Trig"){
  field(DESC, "FOUT manual save trigger")
  field(INPA, "$(P)$(R)Save-Cmd.VAL")
  field(CALC, "(A > 0) ? (VAL+1) : VAL")
  field(VAL, "0")
}
